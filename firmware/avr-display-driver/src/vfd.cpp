#include "vfd.hpp"

#include "global.hpp"

#include <avr/io.h>
#include <avr/pgmspace.h>
#include <util/delay.h>
#include <stdlib.h>

#define CK_PORT D
#define CK_PIN 7

#define CHG_PORT D
#define CHG_PIN 6

#define CL_PORT B
#define CL_PIN 2

#define STB_PORT B
#define STB_PIN 1

#define S_IN_PORT B
#define S_IN_PIN 0

static const uint8_t Font5x7[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00,// (space)
        0x00, 0x00, 0x5F, 0x00, 0x00,// !
        0x00, 0x07, 0x00, 0x07, 0x00,// "
        0x14, 0x7F, 0x14, 0x7F, 0x14,// #
        0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
        0x23, 0x13, 0x08, 0x64, 0x62,// %
        0x36, 0x49, 0x55, 0x22, 0x50,// &
        0x00, 0x05, 0x03, 0x00, 0x00,// '
        0x00, 0x1C, 0x22, 0x41, 0x00,// (
        0x00, 0x41, 0x22, 0x1C, 0x00,// )
        0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
        0x08, 0x08, 0x3E, 0x08, 0x08,// +
        0x00, 0x50, 0x30, 0x00, 0x00,// ,
        0x08, 0x08, 0x08, 0x08, 0x08,// -
        0x00, 0x60, 0x60, 0x00, 0x00,// .
        0x20, 0x10, 0x08, 0x04, 0x02,// /
        0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
        0x00, 0x42, 0x7F, 0x40, 0x00,// 1
        0x42, 0x61, 0x51, 0x49, 0x46,// 2
        0x21, 0x41, 0x45, 0x4B, 0x31,// 3
        0x18, 0x14, 0x12, 0x7F, 0x10,// 4
        0x27, 0x45, 0x45, 0x45, 0x39,// 5
        0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
        0x01, 0x71, 0x09, 0x05, 0x03,// 7
        0x36, 0x49, 0x49, 0x49, 0x36,// 8
        0x06, 0x49, 0x49, 0x29, 0x1E,// 9
        0x00, 0x36, 0x36, 0x00, 0x00,// :
        0x00, 0x56, 0x36, 0x00, 0x00,// ;
        0x00, 0x08, 0x14, 0x22, 0x41,// <
        0x14, 0x14, 0x14, 0x14, 0x14,// =
        0x41, 0x22, 0x14, 0x08, 0x00,// >
        0x02, 0x01, 0x51, 0x09, 0x06,// ?
        0x32, 0x49, 0x79, 0x41, 0x3E,// @
        0x7E, 0x11, 0x11, 0x11, 0x7E,// A
        0x7F, 0x49, 0x49, 0x49, 0x36,// B
        0x3E, 0x41, 0x41, 0x41, 0x22,// C
        0x7F, 0x41, 0x41, 0x22, 0x1C,// D
        0x7F, 0x49, 0x49, 0x49, 0x41,// E
        0x7F, 0x09, 0x09, 0x01, 0x01,// F
        0x3E, 0x41, 0x41, 0x51, 0x32,// G
        0x7F, 0x08, 0x08, 0x08, 0x7F,// H
        0x00, 0x41, 0x7F, 0x41, 0x00,// I
        0x20, 0x40, 0x41, 0x3F, 0x01,// J
        0x7F, 0x08, 0x14, 0x22, 0x41,// K
        0x7F, 0x40, 0x40, 0x40, 0x40,// L
        0x7F, 0x02, 0x04, 0x02, 0x7F,// M
        0x7F, 0x04, 0x08, 0x10, 0x7F,// N
        0x3E, 0x41, 0x41, 0x41, 0x3E,// O
        0x7F, 0x09, 0x09, 0x09, 0x06,// P
        0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
        0x7F, 0x09, 0x19, 0x29, 0x46,// R
        0x46, 0x49, 0x49, 0x49, 0x31,// S
        0x01, 0x01, 0x7F, 0x01, 0x01,// T
        0x3F, 0x40, 0x40, 0x40, 0x3F,// U
        0x1F, 0x20, 0x40, 0x20, 0x1F,// V
        0x7F, 0x20, 0x18, 0x20, 0x7F,// W
        0x63, 0x14, 0x08, 0x14, 0x63,// X
        0x03, 0x04, 0x78, 0x04, 0x03,// Y
        0x61, 0x51, 0x49, 0x45, 0x43,// Z
        0x00, 0x00, 0x7F, 0x41, 0x41,// [
        0x02, 0x04, 0x08, 0x10, 0x20,// "\"
        0x41, 0x41, 0x7F, 0x00, 0x00,// ]
        0x04, 0x02, 0x01, 0x02, 0x04,// ^
        0x40, 0x40, 0x40, 0x40, 0x40,// _
        0x00, 0x01, 0x02, 0x04, 0x00,// `
        0x20, 0x54, 0x54, 0x54, 0x78,// a
        0x7F, 0x48, 0x44, 0x44, 0x38,// b
        0x38, 0x44, 0x44, 0x44, 0x20,// c
        0x38, 0x44, 0x44, 0x48, 0x7F,// d
        0x38, 0x54, 0x54, 0x54, 0x18,// e
        0x08, 0x7E, 0x09, 0x01, 0x02,// f
        0x08, 0x14, 0x54, 0x54, 0x3C,// g
        0x7F, 0x08, 0x04, 0x04, 0x78,// h
        0x00, 0x44, 0x7D, 0x40, 0x00,// i
        0x20, 0x40, 0x44, 0x3D, 0x00,// j
        0x00, 0x7F, 0x10, 0x28, 0x44,// k
        0x00, 0x41, 0x7F, 0x40, 0x00,// l
        0x7C, 0x04, 0x18, 0x04, 0x78,// m
        0x7C, 0x08, 0x04, 0x04, 0x78,// n
        0x38, 0x44, 0x44, 0x44, 0x38,// o
        0x7C, 0x14, 0x14, 0x14, 0x08,// p
        0x08, 0x14, 0x14, 0x18, 0x7C,// q
        0x7C, 0x08, 0x04, 0x04, 0x08,// r
        0x48, 0x54, 0x54, 0x54, 0x20,// s
        0x04, 0x3F, 0x44, 0x40, 0x20,// t
        0x3C, 0x40, 0x40, 0x20, 0x7C,// u
        0x1C, 0x20, 0x40, 0x20, 0x1C,// v
        0x3C, 0x40, 0x30, 0x40, 0x3C,// w
        0x44, 0x28, 0x10, 0x28, 0x44,// x
        0x0C, 0x50, 0x50, 0x50, 0x3C,// y
        0x44, 0x64, 0x54, 0x4C, 0x44,// z
        0x00, 0x08, 0x36, 0x41, 0x00,// {
        0x00, 0x00, 0x7F, 0x00, 0x00,// |
        0x00, 0x41, 0x36, 0x08, 0x00,// }
        0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
        0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
};


static inline void ckPulse() {
    _delay_us(300);
    PORT(CK_PORT) |= _BV(CK_PIN);
    _delay_us(300);
    PORT(CK_PORT) &= ~_BV(CK_PIN);
    _delay_us(300);
}

static inline void posUp(int8_t startInclusive, int8_t stopInclusive, int8_t validPosition) {

    for (int8_t p = startInclusive; p <= stopInclusive; ++p) {
        // validPosition =p;
        if (p == validPosition) {
            PORT(S_IN_PORT) |= _BV(S_IN_PIN);
        } else {
            PORT(S_IN_PORT) &= ~_BV(S_IN_PIN);
        }
        ckPulse();
    }
}

static inline void posDown(int8_t startInclusive, int8_t stopInclusive, int8_t validPosition) {

    for (int8_t p = startInclusive; p >= stopInclusive; --p) {
        //  validPosition = p;
        if (p == validPosition) {
            PORT(S_IN_PORT) |= _BV(S_IN_PIN);
        } else {
            PORT(S_IN_PORT) &= ~_BV(S_IN_PIN);
        }
        ckPulse();
    }
}

static inline void setOutputPin(uint16_t letterOffset, int8_t column, int8_t row) {
    static uint8_t x[] = {0x7F, 0x09, 0x19, 0x29, 0x46};
    if (x[column] & (1 << row)) {
        PORT(S_IN_PORT) |= _BV(S_IN_PIN);
    } else {
        PORT(S_IN_PORT) &= ~_BV(S_IN_PIN);
    }
}

// position 0 - 39
void loadLetter(uint8_t position, uint8_t dot) {
    if ((position >= 10) and (position <= 19)) {
        position += 20;
    } else if ((position >= 20) and (position <= 29)) {
        position -= 10;
    } else if (position >= 30) {
        position -= 10;
    }

    const uint16_t letterOffset = (dot - 32) * 5;

    // g7 - g1
    posDown(6, 0, position);

    // g8 - g20
    posUp(7, 19, position);

    // a1 - a11

    int8_t column = 2;
    int8_t row = 3;
    for (uint8_t a = 0; a <= 10; ++a) {

        setOutputPin(letterOffset, column, row);

        ++column;

        if (column == 5) {
            column = 0;
            ++row;
        }

        ckPulse();
    }

    column = 4;
    row = 6;
    // a18 - a14
    for (uint8_t a = 17; a >= 13; --a) {

        setOutputPin(letterOffset, column, row);

        if (column == 0) {
            column = 4;
            --row;
        } else {
            --column;
        }

        ckPulse();
    }

    // 2 dummy
    PORT(S_IN_PORT) &= ~_BV(S_IN_PIN);
    ckPulse();
    ckPulse();

    // a12 - a13
    column = 3;
    row = 5;
    for (uint8_t a = 11; a <= 12; ++a) {
        setOutputPin(letterOffset, column, row);

        ++column;

        ckPulse();
    }

    // 2 dummy
    PORT(S_IN_PORT) &= ~_BV(S_IN_PIN);
    ckPulse();
    ckPulse();

    // a25 - a19
    column = 0;
    row = 2;
    for (uint8_t a = 24; a >= 18; --a) {
        setOutputPin(letterOffset, column, row);

        if (column == 4) {
            column = 0;
            ++row;
        } else {
            ++column;
        }

        ckPulse();
    }

    // a26 - a35
    column = 4;
    row = 1;
    for (uint8_t a = 25; a <= 34; ++a) {
        setOutputPin(letterOffset, column, row);

        if (column == 0) {
            column = 4;
            --row;
        } else {
            --column;
        }

        ckPulse();
    }

    // a36
    PORT(S_IN_PORT) &= ~_BV(S_IN_PIN);
    ckPulse();

    // g21 - g33
    posUp(20, 32, position);

    // g40 - g34
    posDown(39, 33, position);
}

void vfd::init() {
    // all connectors are outputs
    DDR(CK_PORT) |= _BV(CK_PIN);
    DDR(CHG_PORT) |= _BV(CHG_PIN);
    DDR(CL_PORT) |= _BV(CL_PIN);
    DDR(STB_PORT) |= _BV(STB_PIN);
    DDR(S_IN_PORT) |= _BV(S_IN_PIN);

    _delay_ms(1);
    PORT(CL_PORT) |= _BV(CL_PIN);

    PORT(STB_PORT) |= _BV(STB_PIN);

    // font: 5 x 7

//     PORT(S_IN_PORT) |= _BV(S_IN_PIN);
//    PORT(CHG_PORT) |= _BV(CHG_PIN);
//    _delay_ms(1);
//    PORT(CL_PORT) |= _BV(CL_PIN);
    _delay_ms(1);

    int i = 0;
    while (true) {
        PORT(STB_PORT) &= ~_BV(STB_PIN);

        loadLetter(i, 'B');
        if (i >= 39) {
            i = 0;
        } else {
            i++;
        }
        //  loadLetter(20);

        PORT(STB_PORT) |= _BV(STB_PIN);
        _delay_ms(1000);
    }
}





